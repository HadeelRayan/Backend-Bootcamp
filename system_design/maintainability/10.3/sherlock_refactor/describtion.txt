the main functionalities in sherlock.py

Weaknesses:
High complexity: The script combines command-line parsing, request handling, data loading, and output generation in a single file.
Deep nesting and long functions, making the code hard to follow.
Inconsistent error handling and logging practices.
Lack of modularization: Functions like sherlock() are lengthy and perform multiple tasks.

Code Examples:
The sherlock() function is overly long and handles multiple aspects of the application's logic, from preparing HTTP requests to parsing responses.
The use of nested functions like response_time() within SherlockFuturesSession makes the flow harder to track.
Error handling within get_response() uses multiple except blocks, which could be streamlined.
The main block combines parsing arguments, loading data, and executing searches without clear separation of concerns.
Use of global variables and flags (e.g., args.tor, args.proxy) spread across the file, which could be encapsulated.